name: Laravel CI/CD Pipeline

on:
  push:
    branches: ["main", "dev", "feature/**"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  validation-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postnova_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, openssl, PDO, pgsql, tokenizer, xml, gd, exif, pcntl, bcmath
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-interaction --no-progress
          npm ci
          composer require --dev laravel/pint phpstan/phpstan larastan/larastan --with-all-dependencies

      - name: Copy .env for testing
        run: |
          cp .env.example .env.test
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=pgsql/' .env.test
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env.test
          sed -i 's/DB_PORT=.*/DB_PORT=5432/' .env.test
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=postnova_test/' .env.test
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=postgres/' .env.test
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=postgres/' .env.test

      - name: Run Pint validation
        run: vendor/bin/pint --test

      - name: Run PHPStan analysis
        run: vendor/bin/phpstan analyse --memory-limit=1G

      - name: Run security check
        run: composer audit

      - name: Run tests
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: postnova_test
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: |
          php artisan test

      - name: Build production assets
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
        run: |
          npm run build
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Upload artifact for deployment
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: laravel-artifact
          path: |
            .
            !.github
            !.git
            !node_modules

  deploy-staging:
    needs: validation-test
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: laravel-artifact

      - name: Install Render CLI
        run: curl -fsSL https://raw.githubusercontent.com/renderinc/render-cli/main/install.sh | bash

      - name: Deploy to Render (Staging)
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render services deploy $RENDER_SERVICE_ID --wait

  deploy-production:
    needs: validation-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: laravel-artifact

      - name: Install Render CLI
        run: curl -fsSL https://raw.githubusercontent.com/renderinc/render-cli/main/install.sh | bash

      - name: Deploy to Render (Production)
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render services deploy $RENDER_SERVICE_ID --wait
